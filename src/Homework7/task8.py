"""
Задача со звездочкой.

Реализовать функцию, на вход которой передается имя логической функции
(т.е. функция, которая принимает логические параметры и возвращает логическое
значение. Пример: И, ИЛИ, исключающее ИЛИ и т.д.) и набор аргументов, и
возвращает строку, представляющую таблицу истинности функции.

Пример ввода: some_func("AND", A, B)

Правила форматирования:
    • Переменные должны называться A, B, C, D ... и так далее, в том же порядке,
    в котором они передаются в логическую функцию.
    • Параметров не будет больше 26 (A ... Z)
    • Логические значения будут представлены либо 1 (истина), либо 0 (ложь).

Первая строка будет состоять из следующих частей:
    • имена переменных, разделенные пробелом ()
    • два символа табуляции
    • имя функции, параметры которой в круглых скобках разделены запятыми
    • два символа новой строки

Следующие строки будут состоять из следующих по порядку:
    • значения переменных, разделенные пробелом
    • два символа табуляции
    • результат функции для этого расположения переменных
    • символ новой строки
"""

my_string = input().split(', ')
name_operator, args = my_string[0], my_string[1:]
number_itter = 1 << len(args)
# Печать заголовных строк
print(' '.join(args) + '\t' * 2 + name_operator, sep='', end='')
print('(' + ','.join(args) + ')' + '\n' * 2, sep='')
# Проход таблицы по строкам
for item in range(0, number_itter):
    out_itter = -1
    # Проход строк по символам слева
    for cat in range(len(args) - 1, -1, -1):
        if item & (1 << cat):
            flag = 1
        else:
            flag = 0
        if out_itter == -1:
            out_itter = flag
        else:
            # Получение результата по заданному оператору
            if name_operator == 'AND':
                out_itter = out_itter & flag
            elif name_operator == 'XOR':
                out_itter = out_itter ^ flag
            elif name_operator == 'OR':
                out_itter = out_itter | flag
        # Печать таблицы
        print(flag, end=' ')
    # Печать результата
    print('\t' * 2, out_itter)
